function [Y,Xf,Af] = predict(X)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 24-Apr-2022 17:52:03.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 10xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [60;60;60;56;47;59;411;355;59;61];
x1_step1.gain = [0.0555555555555556;0.0512820512820513;0.0540540540540541;0.0512820512820513;0.032258064516129;0.0540540540540541;0.0106951871657754;0.00995024875621891;0.0625;0.0512820512820513];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.1418593888213099952;-0.93991026775499897372;3.7107202845933500157;1.6814787027304187728;0.28173717135518161481;-3.7271817565103564363;0.053515799926209639548;1.0958960726637838601;-7.3419165785261668589;-2.0181317512481045107];
IW1_1 = [-1.4032964259911993032 2.5678983445801604191 -6.2401678116828103171 7.3621697888574226809 12.325906343659104536 1.8323253021029493048 -1.1996661784024262865 -4.845367500021174223 3.1471412837824508379 2.4521166389559709842;0.23570783106644704885 -0.72266405807223321744 -0.73611437510829891284 -0.2022766306792183888 -0.34203211140231526421 2.6394508601770434453 1.2192172897332600456 -0.6932452498842800459 -2.1957902386868815015 -0.90860164541377530512;-13.375471549905252999 14.3110839362817579 -0.50425396898042973426 2.4397569709885238431 -12.428240091807730039 5.7792084133793686362 1.6676782301528272345 -0.5906537539140941373 -0.61160194121109912047 1.2704442556712352008;1.4330576234358103349 1.6177035468574707533 0.62795775545164844722 0.081029752493914683487 -1.1195953674344196749 2.5587518935382358443 -4.1001482552459176389 -2.5824974387994505953 0.12443047400895775045 -2.53277218775480506;2.8966332349107912769 3.3425836394806647256 2.6460991988512185813 -0.26831658684442244445 0.043595895867779427268 1.3404549805395675754 -7.4322832116916384138 -0.36456520043552986809 0.43393065472635228286 -0.65135873800089338914;7.9299098753245811366 1.0984734611982307495 -0.03434961487049170703 2.4266752865746479273 4.9883488973897964769 -9.3231239988285121711 -4.5995190002437347232 5.2304837404540673873 0.6850638237481296855 -4.5322716262196713899;1.8332763381883159237 2.5379081722909964114 2.2780536638055459697 -0.51787466927681469198 -0.22937517692309200568 -0.92514693792032764996 -6.5543573995644210939 0.17349429490507126128 1.1352242220881905155 -0.08107377995901200729;0.43538915396637500876 14.619504447474270137 4.3166745202131799886 3.8034553654483906904 -8.7006939260698050731 -13.337708394776496945 2.2744676177892557689 -18.574950381242409492 0.32404252524060633833 -0.76806112493751277359;-1.3009896487580505653 1.0942040719779653202 0.57871880628489336118 -0.62659934316402388088 -0.54946530473212429335 0.76319954812028745206 -0.97278298265880724927 2.4024809400617765931 -0.34965023723521532206 1.112931189476853211;-10.939255407470138692 9.6828739898127604846 4.2913960187673572122 7.3729123233475331034 8.5483421374800077075 -2.9174694466925217284 -3.3712050864973686082 -7.4569017329004410044 -0.39236757640036679096 2.7014597902443080457];

% Layer 2
b2 = 3.9292993270979694742;
LW2_1 = [-0.0070589213098827471859 -0.25541039120577718746 -0.019946454495339910329 -0.2149312225435011936 0.35876492437749490927 0.03203177128224208442 -0.46230462531913923963 -0.0030162137397070293635 3.9220962351826686998 0.0063152512158789666369];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.013249092431337;
y1_step1.xoffset = 278.687968309859;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
